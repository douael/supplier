<?php
/**
* 2010-2017 EcomiZ
*
*  @author	EcomiZ
*  @copyright 2010-2017
*  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
*  @version  Release: 1.0.0 $Revision: 1 $
*/

class FeaturesSupplierModel extends ObjectModel
{
	public $id_featuressupplier;
	public $feature_reference;
	public $id_supplier;

	public static $definition = array(
		'table' => 'featuressupplier',
		'primary' => 'id_featuressupplier',
		'multilang' => false,
		'fields' => array(
			'id_featuressupplier' => array(
				'type' => ObjectModel::TYPE_INT
			),
			'feature_reference' => array(
				'type' => ObjectModel::TYPE_STRING,
				'required' => true
			),
			'id_supplier' => array(
				'type' => ObjectModel::TYPE_INT,
				'required' => true
			)
		)
	);

	/*
	 * getFeatureSupplier by id_feature_value (optional id_lang)
	 * return array(quantity, reference, label, supplier)
	 */

	public static function getFeatureSupplier($id_feature_value, $id_lang = 1){
		
		$return = array();
		$feature = new FeatureValue($id_feature_value);
		
		if($feature->id_feature == Configuration::get('FEATURESSUPPLIER_PIECE_ID')) {
			// format : quantity#reference#label
			$value_explode = explode("#",$feature->value[$id_lang]);
			
			$keys = array("quantity", "reference", "label");
			$return = array_combine($keys, array_values($value_explode));
			$ref = $value_explode[1];

			$aFeature_already = Db::getInstance()->getValue("SELECT id_supplier FROM `"._DB_PREFIX_."featuressupplier` WHERE feature_reference = '$ref'");
			$return["supplier"] = $aFeature_already;
		}

		return $return;
	}

	/*
	 * getFeatureNameByRef by reference
	 * return label
	 */

	public static function getFeatureNameByRef($ref)
	{
		$val = Db::getInstance()->getRow("SELECT * FROM `"._DB_PREFIX_."feature_value_lang` WHERE value LIKE '%$ref%'");
		$val = self::getFeatureSupplier($val['id_feature_value']);
		$return = $val['label'];
		return $return;
	}

	public static function getReferencesByProduct($product){
		$references = array();
		$product = new Product($product);
		$features = $product->getFeatures();

		foreach($features as $feature){
			$feature_value = new FeatureValue($feature['id_feature_value']);
			if($feature['id_feature'] == Configuration::get("FEATURESSUPPLIER_PIECE_ID")){
				$references[] = self::getFeatureSupplier($feature_value->id);
			}
		}

		return $references;
	}

	/* 
	 * create and send email
	 * model email :
	 * 1 = standard order
	 * 2 = out of stock order
	 * 3 = pre order
	 * 4 = reappro
	 * 1 email = 1 feature, 1 supplier, multiple or one order
	 */

	public static function contentEmail($model, $data = null){
		$from_name = Configuration::get('PS_SHOP_NAME');
		$orders_to_send = array();
		$product_list = array();
		
		//var_dump($model);
		
		switch ($model) {

/* **********  case 1 & 2 : with ORDER  ************* */

			case 1: // for standard order			1 order, 1 customer
			case 2: // for out of stock order		1 order, 1 customer

					$id_order = $data;
					$order = new Order($id_order);
					// get order detail
					$order_detail = $order->getOrderDetailList();

					// get list of products non fini
					foreach($order_detail as $order_product){
						$product = new Product($order_product["product_id"]);
						$features = $product->getFeatures();

						// for $i quantity : if customer buy X quantity of a product
						for($i = 1;$i<= $order_product['product_quantity'];$i++){
							foreach($features as $feature){
								// if product feature Produit non fini
								if($feature['id_feature'] == Configuration::get("FEATURESSUPPLIER_PRODUIT_FINI_ID")){
									$feature_value = new FeatureValue($feature['id_feature_value']);
									if($feature_value->value[1] == "non" || $feature_value->value[1] == "Non"){
										//$product_list[] = $order_product["product_id"];
										$orders_to_send[$id_order][] = $order_product["product_id"];
									}
								}
							}
						}
					}

					$subject ="New supplier order ID $id_order for $from_name";

				break;

/* **********  case 3 : pre orders : multiple orders, one product  ************* */

			case 3:
				//ddd($data);
				foreach($data as $data_order){
					$id_order = $data_order;
					$order = new Order($id_order);
					// get order detail
					$order_detail = $order->getOrderDetailList();

					// get list of products non fini
					foreach($order_detail as $order_product){
						$product = new Product($order_product["product_id"]);
						$features = $product->getFeatures();

						// for $i quantity : if customer buy X quantity of a product
						for($i = 1;$i<= $order_product['product_quantity'];$i++){
							foreach($features as $feature){
								// if product feature Produit non fini
								if($feature['id_feature'] == Configuration::get("FEATURESSUPPLIER_PRODUIT_FINI_ID")){
									$feature_value = new FeatureValue($feature['id_feature_value']);
									if($feature_value->value[1] == "non" || $feature_value->value[1] == "Non"){
										$orders_to_send[$id_order][] = $order_product["product_id"];
									}
								}
							}
						}
					}
				}

				$subject = "New order for $from_name";

				break;

/* **********  case 4 : reappro : without order, only product  ************* */

			case 4: // reappro
	
				$id_order = "REAPPRO";

				// select all product with threshold where threshold and minimal qtt > 0 
				$sql = '
				SELECT *
				FROM ' . _DB_PREFIX_ . 'productthreshold
				';
				$productthreshold = Db::getInstance()->ExecuteS($sql);

				foreach($productthreshold as $order_product){
					// get current stock
					$current_stock = StockAvailable::getQuantityAvailableByProduct($order_product["id_product"], 0);

					// compare current stock with threshold
					if($current_stock <= $order_product["threshold_qtt"]){
						// if threshold <= current stock
						// calculate delta : minimal_qtt - current_stock = delta
						$delta = $order_product["minimal_qtt"] - $current_stock;
					}

					$product = new Product($order_product["id_product"]);
					$features = $product->getFeatures();

					// for $i quantity : if customer buy X quantity of a product
					for($i = 1;$i<= $delta;$i++){
						foreach($features as $feature){
							// if product feature Produit non fini
							if($feature['id_feature'] == Configuration::get("FEATURESSUPPLIER_PRODUIT_FINI_ID")){
								$feature_value = new FeatureValue($feature['id_feature_value']);
								if($feature_value->value[1] == "non" || $feature_value->value[1] == "Non"){
									//$product_list[] = $order_product["id_product"];
									$orders_to_send[$id_order][] = $order_product["id_product"];
								}
							}
						}
					}
				}

				$subject = "New order for $from_name";
				break;

/* **********  END SWITCH ************* */
		}

/* **********  COMMON ALL CASES ************* */

		foreach($orders_to_send as $id_order_to_send => $product_list){
			// get list of references from list of product non fini
			$references = array();
			foreach($product_list as $product_nonfini){
				$references[] = self::getReferencesByProduct($product_nonfini);
			}

			// group by supplier
			$all_supplier = array();
			foreach($references as $pdt){
				foreach($pdt as $reference){
					$supplier = new Supplier($reference['supplier']);
					$all_supplier[$supplier->id_supplier] = $supplier->meta_description[1];
				}
			}

			// get final list of references group by supplier
			$aSupplierMail = array();
			foreach($all_supplier as $key => $supplier){

				$id_supplier = $key;
				$product_non_fini = $references;
				
				foreach($product_non_fini as $product){
					foreach($product as $reference){
						if(isset($reference['supplier']) && $reference['supplier'] != "" &&
						$reference['supplier'] == $id_supplier){
							$aSupplierMail[$id_supplier][] = $reference;
						}
					}
				}
			}

			// group by reference :
			$aResultByRef = array();

			foreach( $aSupplierMail as $key0 => $val0 )
			{
				foreach( $val0 as $key1 => $val1 )
				{
					if( !isset( $aResultByRef[$key0][ $val1['quantity'].$val1['reference'] ] ) )
					{
						$aResultByRef[$key0][ $val1['quantity'].$val1['reference'] ] = array
						(
							'reference' => $val1['reference'],
							'label' => $val1['label'],
							'quantity' => $val1['quantity'],
							'supplier' => $val1['supplier'],
							'total' => 0
						);
					}
					$aResultByRef[$key0][ $val1['quantity'].$val1['reference'] ]['total']++;
					
				}
			}

			if($model == 1 || $model == 2 || $model == 3){
				// get customer infos
				$address = new Address($order->id_address_delivery);
				$dest_name = $address->firstname." ".$address->lastname;
				$dest_company = $address->company;
				$dest_address = $address->address1." ".$address->address2;
				$dest_city = $address->postcode." ".$address->city." ".$address->country;
				$dest_phone = $address->phone." ".$address->phone_mobile;
				$str_id_order = 'ID '.$id_order_to_send;
			}else if ($model == 4){
				// get shop info (reappro)
				$shop_address = '';
				$shop = new Shop(1);
				$shop_address_obj = $shop->getAddress();
				if (isset($shop_address_obj) && $shop_address_obj instanceof Address) {
					$shop_address = AddressFormat::generateAddress($shop_address_obj, array(), ' - ', ' ');
				}

				$dest_name = $from_name;
				$dest_company = "";
				$dest_address = $shop_address;
				$dest_city = "";
				$dest_phone = Configuration::get('PS_SHOP_PHONE', null, null, $id_shop);
				$str_id_order = "";
			}

			// for each supplier : create and send a email
			foreach($aResultByRef as $key => $supplier){
				$aMess = array();
				$aMess ["title"] = "Une nouvelle commande $str_id_order a été passée sur $from_name \n";
				$aMess ["dest"][] = $dest_name." \n";
				$aMess ["dest"][] = $dest_company." \n";
				$aMess ["dest"][] = $dest_address." \n";
				$aMess ["dest"][] = $dest_city." \n";
				$aMess ["dest"][] = $dest_phone." \n";
				
				foreach($supplier as $reference){
					//$aMess .= $reference['total']." x [".$reference['quantity']." x ". $reference['reference'] . " (".$reference['label'].")] \n";
					$aMess ["cmd"][] = $reference['total']." x [".$reference['quantity']." x ". $reference['reference'] . " (".$reference['label'].")] \n";
				}

				/*foreach($supplier as $reference){
					var_dump($reference['total']." x [".$reference['quantity']." x ". $reference['reference'] . " (".$reference['label'].")] \n");
					
				}*/
				
				$strMess = "<strong>Une nouvelle commande $str_id_order a été passée sur $from_name </strong><br/>";
				$strMess .= "<strong>DESTINATAIRE</strong> : <br/>";
				$strMess .= $dest_name."  <br/>";
				$strMess .= $dest_company."  <br/>";
				$strMess .= $dest_address."  <br/>";
				$strMess .= $dest_city."  <br/>";
				$strMess .= $dest_phone."  <br/>";
				$strMess .= "  <br/>";
				$strMess .= "<strong>COMMANDE</strong> :  <br/>";
				foreach($supplier as $reference){
					// $strMess .= $reference['quantity']." x ". $reference['reference'] . " (".$reference['label'].")  <br/>";
					$strMess .= $reference['total']." x [".$reference['quantity']." x ". $reference['reference'] . " (".$reference['label'].")] <br/>";
				}
				$strMess .= " <hr/>";
				$content[$key][$id_order_to_send] = $aMess;
				$content[$key][$id_order_to_send]["txt"] = $strMess;
			}
		}
		
		foreach($content as $key => $orders){
			$to = $key; // id supplier
			$email_content = "";

			foreach($orders as $order){
				$email_content .= $order['txt'];
			}

			self::createEmail($email_content, $subject, $to, $model, $orders);
		}
	}

	/* 
	 * create and send email
	 */

	public static function createEmail($content, $subject, $to, $model, $orders){
		// get supplier info : email and address
		$id_supplier = $to;
		$supplier = new Supplier($id_supplier);
		$to = $supplier->meta_description[1];
		$address_supplier_obj = new Address(Address::getAddressIdBySupplierId($id_supplier));
		if (isset($address_supplier_obj) && $address_supplier_obj instanceof Address) {
			$address_supplier = AddressFormat::generateAddress($address_supplier_obj, array(), '<br/>');
		}

		// define content tpl
		$pdf_content['address_supplier'] = $address_supplier;
		$pdf_content['orders'] = $orders;
		
		// generate PDF
		require_once _PS_MODULE_DIR_ . 'featuressupplier/models/HTMLTemplateCustomPdf.php';

		$id_pdf = Configuration::get('FEATURESSUPPLIER_CHRONO_PDF');

		$pdf = new PDF((object)$pdf_content, 'CustomPdf', Context::getContext()->smarty);

		$pdf_name = (string)"CIDER_".Tools::str2url($to)."_". date("YmdHis")."_".$id_pdf.".pdf";
		// attache PDF
		$file_attachement['content'] = $pdf->render(false);
		$file_attachement['name'] = $pdf_name;
		$file_attachement['mime'] = 'application/pdf';

		$id_lang = 1;

		$template = 'new-order-supplier';
		$to; // emailSupplier
		$from = Configuration::get('PS_SHOP_EMAIL');
		$from_name = Configuration::get('PS_SHOP_NAME');
		$bcc = Configuration::get('FEATURESSUPPLIER_BCC_EMAIL');
		$tpl_var = array(
			'{cnt}' => $content
		);

		// send email to supplier with PDF attached
		if(
			Mail::Send(
				$id_lang, // id lang
				$template, // template
				Mail::l($subject, $id_lang), // subject
				$tpl_var, // template vars
				$to, // $to
				null, // to name
				null, // from
				null, // from name
				$file_attachement, // pdf
				null, _PS_MODULE_DIR_ . 'featuressupplier/mails/',
				false, // die
				null, // id shop
				$bcc//bcc
			)
		){
			$message = "Feature supplier : EMAIL OK to ".$to;
			PrestaShopLogger::addLog($message, 1);
		}else{
			$message = "Feature supplier : EMAIL KO to ".$to;
			PrestaShopLogger::addLog($message, 3);
		}
		$id_pdf++;
		
		Configuration::updateValue('FEATURESSUPPLIER_CHRONO_PDF', $id_pdf);
	}
}
